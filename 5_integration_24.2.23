---
title: Week4-day5 :integration template"
author: "Devika Agarwal/updataed by Carla Cohen"
date: "17/10/2022"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE) #print code and results
```


```{r}
library(Seurat)
library(SeuratData)
library(SeuratWrappers)
library(patchwork)
library(tidyverse)
library(batchelor)
library(harmony)
library(lisi)
library(MAST)
options(future.globals.maxSize = 4000 * 1024^2)    # Maximum allowed total size (in bytes) of global variables identified
```

# Exercise 1 - joint analysis of two PBMC datasets

Here we will look at how to PBMC datasets compare without any integration. 

## 1. Import the two RDS files into R

These RDS object have already been put through the QC and filtering steps covered on Seurat day 1.


```{r}
pbmcv2 <- readRDS("pbmcv2_filtered.rds") #13070 features across 859 barcodes
pbmcv3 <- readRDS("pbmcv3_filtered.rds") #15246 feaetures across 778 barcodes
```


Plot these metadata covariates nCount_RNA/nFeature_RNA/percent.mt to see how they range for both the datasets 

use `VlnPlot()` from Seurat

```{r, fig.width = 12}
p1 <- VlnPlot(pbmcv2,features = c("nCount_RNA","nFeature_RNA","percent.mt")) 
p2 <- VlnPlot(pbmcv3,features = c("nCount_RNA","nFeature_RNA","percent.mt")) 
cowplot::plot_grid(p1,p2, nrow = 2)
```



## 2. Create a merged Seurat object containing both sets of data (no batch correction)

Vignette: https://satijalab.org/seurat/articles/merge_vignette.html

```{r}
seurat_merged <- merge(pbmcv2, 
                       y = pbmcv3,
                       add.cell.ids = c("v2","v3"),
                       project = "pmbc_merged")

seurat_merged #15413 features across 1637 samples 
dim(seurat_merged)
pbmcv2[[]]  #cells already named v2/v3 in orig.ident
pbmcv3[[]]
seurat_merged[[]]
```

Check the dims of the merged object in comparison to the separate objects

What is the total gene number in the merged object compared to each single object?

```{r}

```

## 3.1 Perform SCTransform normalisation

Do you want to regress any meta.data variables ?

```{r, warning=FALSE}
seurat_merged <- SCTransform(seurat_merged,
                            vars.to.regress = "percent.mt", 
                            variable.features.n = 3000) #default

```

Plot to see how the nCount_RNA looks before and after SCT normalisation for the merged dataset?

Did SCT do a good job in normalizing the sequencing depth across the two datasets?


```{r}
VlnPlot(seurat_merged,features = c("nCount_RNA","nCount_SCT"), same.y.lims = TRUE) 
p2 <- VlnPlot(pbmcv3,features = c("nCount_RNA","nFeature_RNA","percent.mt")) 
cowplot::plot_grid(p1,p2, nrow = 2)

```


What should the Default Assay be?

```{r}
DefaultAssay(seurat_merged) #SCT
```

Plot the Variable features plot for data with top 10 variable genes labelled

```{r, fig.width=8}
top_10_genes <- VariableFeatures(seurat_merged, assay = "SCT")[1:10]
p1 <- VariableFeaturePlot(seurat_merged , selection.method = "SCT")
LabelPoints(p1, top_10_genes, repel = TRUE)

FeaturePlot()


```

## 3.2 Run PCA and visualize 

Can you see a batch effect between pbmc v2 and v3?


```{r}
seurat_merged <- RunPCA(seurat_merged, assay = "SCT")
```

Look at which genes are driving your PCs.

```{r, fig.width=8}
VizDimLoadings(seurat_merged)
```


```{r}
DimPlot(seurat_merged)

```

Choose optimal  number of PCs for UMAP

```{r}
ElbowPlot(seurat_merged) #1
```

## 3.3 Run the Seurat UMAP function and visualize

Is there a batch effect? Yes


```{r}
seurat_merged <- RunUMAP(seurat_merged,
                         dims = 1:20, 
                         reduction = "pca", 
                         assay = "SCT")
Dim5 <- DimPlot(seurat_merged, reduction = "umap", group.by = "orig.ident")
```

### Optional: Do cells cluster by celltypes?

Plot some pbmc celltype markers to see how they look on the UMAP

```{r}
FeaturePlot(seurat_merged, features = c("LYZ","FCGR3A","CD4","CD8A","GNLY","MS4A1","CST3","PPBP"))
```


## Exercise 2: Seurat integration with SCTransform

Check out the Vignette: https://satijalab.org/seurat/articles/integration_introduction.html#performing-integration-on-datasets-normalized-with-sctransform-1 

The Seurat v2 integration method is slightly different depending on whether you perform log normalistaion or SCTransformation on your seurat objects. Here we are using the SCTransform method (the vignette covers both).

### 1. Set up

Import the RDS files 

We will read in the objects again to start the integration workflow from scratch

```{r}
pbmcv2 <- readRDS("pbmcv2_filtered.rds")
pbmcv3 <- readRDS("pbmcv3_filtered.rds")
```

Generate a named list of the two objects to run workflow

```{r}
pbmc.list <- list("v2" = pbmcv2,"v3" = pbmcv3)
```

Apply SCTransform across the list

```{r}
#note different syntax when using lapply (lapply(list, function, variables))
pbmc.list <- lapply(pbmc.list,SCTransform,
                    assay = "RNA",
                    vars.to.regress = "percent.mt",
                    variable.features.n = 3000,
                    new.assay.name = "SCT")
```

Check dims for both objects in list after SCTransform
```{r}
dim(pbmc.list[[1]]) #11458 859 or: dim(pbmc.list[["v2"]])
dim(pbmc.list[[2]]) #12791 778

lapply(pbmc.list, dim)

```

Make sure Default assay in both objects is SCT
```{r}
DefaultAssay(pbmc.list$v2) #<- "SCT"
DefaultAssay(pbmc.list$v3) #<- "SCT"

```

Choose the features to use when integrating multiple datasets. 

This function ranks features by the number of datasets they are deemed variable in, breaking ties by the median variable feature rank across datasets. It returns the top scoring features by this ranking.
```{r}
features <- SelectIntegrationFeatures(pbmc.list, 
                                      assay = c("SCT","SCT"), #unnecessary when specifying default assay 
                                      nfeatures = 2000)
#conceptually similar to 'find variable features'
```

Prepare an object list normalized with sctransform for integration (run `PrepSCTIntegration()` )

This function subsets the scale.data slot to only contain residuals for anchor.features for efficiency in downstream processing
It is specific to the SCTransform workflow and makes sure you have the SCTransform residuals for the remaining genes

```{r}
pbmc.list <- PrepSCTIntegration(pbmc.list, 
                                assay = "SCT", 
                                anchor.features = features)

```

> After this step, the features present in the scale.data slots of the two objects are the same
> anchor.features are used in the anchor finding process


### Optional exercise

How similar are these features to the variable features that we found for the pbmcv2 and v3 individually?
- extract variable features for each dataset individually
- compare these with "features"; which has the variable features most common for both datasets


## 2. Perform integration

Find a set of anchors between a list of Seurat objects. These anchors can later be used to integrate the objects.

```{r}
pbmc.anchors <- FindIntegrationAnchors(pbmc.list, 
                                       assay = c(rep("SCT",length(pbmc.list))), 
                                       anchor.features = features, 
                                       normalization.method = "SCT", 
                                       dims = 1:20)

```

Integrate the two pbmc objects

```{r}
#note you're providing the anchors and not the object
pbmc.combined.sct <- IntegrateData(
  anchorset = pbmc.anchors, 
  dims = 1:20,
  new.assay.name = "v2_v3_integrated", 
  normalization.method = "SCT")
```

What is the Default assay now?
Check to see if the Seurat object has changed in the Assay slot at all

```{r}
DefaultAssay(pbmc.combined.sct) #v2_v3_integrated
```

## 3. Analysis of integrated data

Run  PCA on Integrated data

```{r}
pbmc.combined.sct <- RunPCA(pbmc.combined.sct)
```

How many PCs should we use going forward?
```{r}
ElbowPlot(pbmc.combined.sct) #15-20
```

Visualise PCA, how does this compare to the merged data?

```{r}
p1 <- DimPlot(seurat_merged, reduction = "pca") + ggtitle("Merged")
p2 <- DimPlot(pbmc.combined.sct, reduction = "pca") + ggtitle("Integrated")
plot_grid(p1,p2)
```



Run UMAP 
```{r}
pbmc.combined.sct <- RunUMAP(pbmc.combined.sct, assay = "v2_v3_integrated", dims = 1:20, reduction = "pca")
```


```{r}
DefaultAssay(pbmc.combined.sct)
```

Find neighbors and clusters for the integrated data

Run `FindNeighbors()` and `FindClusters()` 
Try using multiple resolutions at the same time for the clustering e.g. 0.5 and 0.8
What other clustering algorithms could be used here? Which one is used by default?


```{r}
pbmc.combined.sct <- FindNeighbors(pbmc.combined.sct, reduction = "pca",dims = 1:20)

pbmc.combined.sct <- FindClusters(pbmc.combined.sct, resolution = 0.8)
```


How many clusters have been defined at each resolution?
```{r}
pbmc.combined.sct$v2_v3_integrated_snn_res.0.8 %>% levels() #11
pbmc.combined.sct$v2_v3_integrated_snn_res.0.5 %>% levels() #9

```

Visualse UMAP plot for batch effect and clusters

check the Default Assay to be sure

```{r}
DefaultAssay(pbmc.combined.sct)

Dim1 <- DimPlot(pbmc.combined.sct, reduction = "umap", group.by = "orig.ident")
Dim2 <- DimPlot(pbmc.combined.sct, reduction = "umap", group.by = "v2_v3_integrated_snn_res.0.5")
Reductions(pbmc.combined.sct)
```

Plot some canonical PBMC cluster markers e.g. S100A9, S100A8, LYZ, IGKC, GNLY, IGHM, NKG7, IGLC2

Which assay should we plot them on? (try both Integrated and SCT, is there a difference?)
First plot on the Integrated assay

```{r, fig.width=8}
DefaultAssay(pbmc.combined.sct)
p1 <- FeaturePlot(pbmc.combined.sct, reduction = "umap", 
            features = c("S100A9","S100A8","LYZ","IGKC","GNLY","IGHM","NKG7","IGLC2"))
```

Set default assay to "SCT" then do the same plot
```{r, fig.width = 12}
DefaultAssay(pbmc.combined.sct) <- "SCT"
p2 <- FeaturePlot(pbmc.combined.sct, reduction = "umap", 
            features = c("S100A9","S100A8","LYZ","IGKC","GNLY","IGHM","NKG7","IGLC2"))
plot_grid(p1,p2)

#SCT plot is much clearer due to better signal to noise ratio
#forcing clusters to merge introduces noise on the level of expression of individual genes
#but using the original data but compared between clusters that account for technical variability makes the best of both worlds?
#or does merging process internally rerun SCTransform?

```

## 4. Identify markers

We want to identify markers that distinguish each cluster. 
Look up `FindMarkers` and `FindAllMarkers`, which one should we use here?

Why are we changing the DefaultAssay?
Do we need to renormalise RNA Assay?

Use the "LR" test

```{r}
DefaultAssay(pbmc.combined.sct) <- "RNA"
#Why using RNA here?
#1. RNA is not scaled and not feature-selected - i.e. data is raw
#2. Differential expression on raw data not scaled/transformed
#3. We are comparing groups of cells rather than individual cells, and group identity has been assigned following integration so Batch effects should be evenly distributed
#4. SCT only has a subset of 2000 genes rather than all of the genes
#BUT: how about true biological variation between batches + differences in sequencing depth?
#if needed can still regress out 
#don't do this automatically: violin plot features of interest per cluster and per sample to see if there's any batch effects that are worth accounting for 
pbmc.combined.sct <- NormalizeData(
    object = pbmc.combined.sct,
    normalization.method = "LogNormalize")

all_markers <- FindAllMarkers(pbmc.combined.sct, 
               latent.vars = c("orig.ident","percent.mt","nCount_RNA","nFeature_RNA"), #should you take out mitochondrial percentage?
               test.use = "LR") #logistic regression, default is Wilcoxon, but LR allows regressing out #orig.ident
pbmc.combined.sct$nFeature_RNA
all_markers
               
```

Filter the top 5 markers for each cluster
use `dply::group_by` and `slice_max()`
How do you define "top"?

```{r}

pbmc.combined.sct.markers.top5 <- all_markers %>%
  group_by(cluster) %>%
  slice_max(order_by = avg_log2FC, n = 5) 
#this is only looking at upregulated genes
#could subset for p values, but all significant, as we are only searching among the highly variable genes

max(pbmc.combined.sct.markers.top5$p_val_adj) 

```

plot Heatmap or Dotplot of markers

try functions `Seurat::DoHeatmap` or `Seurat::Dotplot`

```{r}
DefaultAssay(pbmc.combined.sct) <- "SCT"
h1 <- DoHeatmap(pbmc.combined.sct,
          features = pbmc.combined.sct.markers.top5$gene, 
          group.by = "v2_v3_integrated_snn_res.0.5", 
          slot = "scale.data")
h2 <- DoHeatmap(pbmc.combined.sct,
          features = pbmc.combined.sct.markers.top5_unregressed$gene, 
          group.by = "v2_v3_integrated_snn_res.0.5", 
          slot = "scale.data")
plot_grid(h1,h2)

d1 <- DotPlot(pbmc.combined.sct,
        features = unique(pbmc.combined.sct.markers.top5$gene),
        group.by = "v2_v3_integrated_snn_res.0.5") + RotatedAxis()
d2 <- DotPlot(pbmc.combined.sct,
        features = unique(pbmc.combined.sct.markers.top5_unregressed$gene),
        group.by = "v2_v3_integrated_snn_res.0.5") + RotatedAxis()

plot_grid(d1,d2)
```

How well do you think the clustering has worked?
Are you able to identify each cluster?
Would you re-evaluate any of the clusters?


## Optional 

Spend some time experimenting with different statistical tests in the FindAllMarkers command
Try some different parameters
Sort by log2fc vs padj
How does this affect the plots?
Use your results to label the identity of each cluster and plot on a UMAP

# Bonus Exercise: Run Harmony based integration

You can run Harmony within your Seurat workflow. You'll only need to make two changes to your code.

IMPORTANT DIFFERENCE: In the Seurat integration tutorial, you need to define a Seurat object for each dataset. 
With Harmony integration, create only one Seurat object with all cells.
Before running Harmony, make a Seurat object and following the standard pipeline through PCA.

After that Run Harmony with the `RunHarmony()` function
In downstream analyses, use the Harmony embeddings instead of PCA.
For example, run Harmony and then UMAP in two lines.

Vignette: http://htmlpreview.github.io/?https://github.com/immunogenomics/harmony/blob/master/docs/SeuratV3.html


Create a merged object, run SCTransform and PCA
```{r}
seurat_merged <- merge()

```


Run Harmony and include the optimisation graph

```{r}
seurat_merged_harmony <- RunHarmony(seurat_merged,
                                    dims.use = 1:20,
                                    group.by.vars = "orig.ident",
                                    plot_convergence = TRUE)
#converges after 6 rounds of (10 clusters) i.e. 60 iterations
```


Run UMAP, FindNeighbours and FindClusters, then visualise some key genes. 
```{r}
seurat_merged_harmony <- RunUMAP(seurat_merged_harmony, 
                                 reduction = "harmony", #harmony is a reduction, not an assay, no longer run on PCA!
                                 dims = 1:30)
seurat_merged_harmony <- FindNeighbors(seurat_merged_harmony, reduction = "harmony", dims = 1:30)
seurat_merged_harmony <- FindClusters(seurat_merged_harmony)
```

How do the Harmony and Seurat integration methods compare?

```{r}
Reductions(seurat_merged_harmony)
Dim3 <- DimPlot(seurat_merged_harmony, reduction = "umap", group.by = "orig.ident") + ggtitle("Harmony")
Dim4 <- DimPlot(seurat_merged_harmony, reduction = "umap", group.by = "SCT_snn_res.0.8") + ggtitle("Harmony")

Dim1 <- Dim1 + ggtitle("SCTransform")
Dim2 <- Dim2 + ggtitle("SCTransform") 
Dim5 <- Dim5 + ggtitle("Merged")
plot_grid(Dim5, Dim1, Dim3, ncol = 3)
plot_grid(Dim2,Dim4)

#would now compare markers between clusters and see which one does a better job 
```


Compute LISI : https://github.com/immunogenomics/LISI 

